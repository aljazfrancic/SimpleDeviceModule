name: Determine latest openDAQ framework artefact

inputs:

  opendaq-framework-release-version:
    required: false
    default: latest

  win32-force: 
    required: false
    default: false

outputs:

  version:
    description: "Latest openDAQ release version"
    value: ${{ steps.determine-latest-package.outputs.version }}

  platform:
    description: "Detected platform"
    value: ${{ steps.determine-latest-package.outputs.platform }}

  packaging:
    description: "Package type (deb/exe)"
    value: ${{ steps.determine-latest-package.outputs.packaging }}

  artefact:
    description: "Artefact filename"
    value: ${{ steps.determine-latest-package.outputs.artefact }}

  uri:
    description: "Full URI to artefact"
    value: ${{ steps.determine-latest-package.outputs.uri }}

  scheme:
    description: "Scheme (s3)"
    value: ${{ steps.determine-latest-package.outputs.scheme }}

  authority:
    description: "Authority (bucket)"
    value: ${{ steps.determine-latest-package.outputs.authority }}

  path:
    description: "Path inside bucket"
    value: ${{ steps.determine-latest-package.outputs.path }}

runs:
  using: composite
  steps:
    - name: Determine latest openDAQ package
      id: determine-latest-package
      shell: bash
      run: |
        set -e

        input_version="${{ inputs.opendaq-framework-release-version }}"

        if [[ -z "$input_version" || "$input_version" == "latest" ]]; then
          version=$(gh api repos/openDAQ/openDAQ/releases/latest --jq '.tag_name')
          if [[ -z "$version" || "$version" == "null" ]]; then
            echo "::error::Failed to determine latest openDAQ release version"
            exit 1
          fi

          version=${version#v}
        else
          version="$input_version"
        fi

        platform=""
        packaging=""

        if [[ "$RUNNER_OS" == "Linux" ]]; then
          arch=$(uname -m)
          if [[ "$arch" == "x86_64" ]]; then
            platform="ubuntu22.04-x86_64"
          elif [[ "$arch" == "aarch64" ]]; then
            platform="ubuntu22.04-arm64"
          else
            echo "::error::Unsupported Linux arch: $arch"
            exit 1
          fi
          packaging="deb"

        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          WIN32_FORCE="${{ inputs.win32-force }}"
          if [[ "$WIN32_FORCE" == "true" ]]; then
            platform="win32"
          else
            platform="win64"
          fi
          packaging="exe"

        else
          echo "::error::Unsupported runner OS $RUNNER_OS"
          exit 1
        fi

        artefact="opendaq-${version}-${platform}.${packaging}"
        scheme="s3"
        authority="bb-blueberry-sdk-releases"
        sdk="releases/v${version}/SDK"

        echo "version=$version" >> $GITHUB_OUTPUT
        echo "platform=$platform" >> $GITHUB_OUTPUT
        echo "packaging=$packaging" >> $GITHUB_OUTPUT
        echo "artefact=$artefact" >> $GITHUB_OUTPUT
        echo "scheme=$scheme" >> $GITHUB_OUTPUT
        echo "authority=$authority" >> $GITHUB_OUTPUT
        echo "path=$sdk" >> $GITHUB_OUTPUT
        echo "uri=${scheme}://${authority}/${sdk}/${artefact}" >> $GITHUB_OUTPUT
