name: Build simple device module with openDAQ framework and run tests

on:
  workflow_dispatch:
    inputs:
      runner:
        description: "Runner label"
        required: true
        type: string

      branch:
        description: "Branch to checkout"
        required: true
        type: string

      artifact-run-id:
        required: true
        type: string

      artifact-name:
        required: true
        type: string

      file-name:
        required: true
        type: string

  workflow_call:
    inputs:
      runner:
        description: "Runner label"
        required: true
        type: string

      branch:
        description: "Branch to checkout"
        required: true
        type: string

      artifact-run-id:
        required: true
        type: string

      artifact-name:
        required: true
        type: string

      file-name:
        required: true
        type: string

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  build:
    runs-on: ${{ inputs.runner }}

    steps:
      - name: Checkout openDAQ module repository
        uses: actions/checkout@v4
        with:
          repository: openDAQ/SimpleDeviceModule
          ref: ${{ inputs.branch }}

      # - name: Download openDAQ framework package
      #   uses: ./.github/actions/opendaq-github-download-artifact
      #   with:
      #     opendaq-artifact-run-id: ${{ inputs.artifact-run-id }}
      #     opendaq-artifact-name: ${{ inputs.artifact-name }}

      - name: Download openDAQ framework package
        id: download
        uses: openDAQ/actions/framework-download-artifact@action-opendaq-version-parse
        with:
          run-id: ${{ inputs.artifact-run-id }}
          artifact-name: ${{ inputs.artifact-name  }}
          artifact-filename: ${{ inputs.file-name  }}

      - name: Install openDAQ framework package
        uses: ./.github/actions/framework-install
        with:
          opendaq-framework-package-filename: ${{ inputs.artifact-name }}/${{ inputs.file-name }}

      - name: Set CMake generator and platform
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "CMAKE_GENERATOR=Visual Studio 17 2022" >> $GITHUB_ENV
          else
            echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV
          fi

      - name: Configure simple device module with CMake
        shell: bash
        run: |
          cmake -B build/output -S . -G "$CMAKE_GENERATOR" -DEXAMPLE_MODULE_ENABLE_TESTS=ON -DCMAKE_BUILD_TYPE=Release

      - name: Build simple device module with CMake
        run: cmake --build build/output --config Release

      - name: Run simple device module tests with CMake
        run: ctest --test-dir build/output --output-on-failure -C Release -V

